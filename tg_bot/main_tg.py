import json

import telegram
import base64
from telegram import Update, Message
from io import BytesIO
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CallbackQueryHandler, CommandHandler, ContextTypes, MessageHandler, filters
from config import BOT_TOKEN, REST_API_TOKENS
import requests
import datetime


async def start(update, context):
    # –ø–µ—Ä–µ–≤–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —é–∑–µ—Ä–∞ –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º(–Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–µ–∫—Ç, –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π)
    user = update.effective_user
    list_of_states[user.id] = 'without condition'

    response = requests.post('http://127.0.0.1/api/v1/users',
                             json={'id': user.id, 'username': user.first_name,
                                   'auth_date': str(datetime.date.today()),
                                   'token': REST_API_TOKENS[0], 'photo_url': 'bbbbbbbbbb'})
    await update.message.reply_html(
        f'üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}. –Ø –±–æ—Ç –ø—Ä–∏ —Å–∞–π—Ç–µ:'
        f'\n http://gaduka.sytes.net'
        f'\n'
        f'\nüêç–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫–∞–∫ –Ω–∞—É—á–∏—Ç—å—Å—è –ø–∏—Å–∞—Ç—å –∫–æ–¥, —Ç–∞–∫ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ'
        f'\n'
        f'\nüëâ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, –≤–≤–µ–¥–∏ /help!')


async def help_command(update, context):
    # –ø–µ—Ä–µ–≤–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —é–∑–µ—Ä–∞ –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º(–Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–µ–∫—Ç, –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π)
    user = update.effective_user
    list_of_states[user.id] = 'without condition'

    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help"""
    await update.message.reply_text(
        f'üêç –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –≥–∞–¥—é–∫–µ.'
        f' –£ –º–µ–Ω—è –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –∫—É—Ä—Å –∏–ª–∏ –ø–æ—á–∏—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –≥–∞–¥—é–∫–µ.'
        f'\n–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–≤–æ–π –∫–æ–¥ –ø—Ä—è–º–æ –∑–¥–µ—Å—å.'
        f'\n'
        f'\nüïπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:'
        f'\n'
        f'\nüó∫Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è:'
        f'\n ‚Ä¢ /help - –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ '
        f'\n ‚Ä¢ /menu - –ú–µ–Ω—é –≥–ª–∞–≤–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.'
        f'\n'
        f'\nüìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–∞–¥—é–∫–µ:'
        f'\n ‚Ä¢ /doc - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è '
        f'\n ‚Ä¢ /course - –ö—É—Ä—Å –ø–æ –≥–∞–¥—é–∫–µ '
        f'\n'
        f'\n‚å®Ô∏è –†–∞–±–æ—Ç–∞ —Å —è–∑—ã–∫–æ–º:'
        f'\n ‚Ä¢ /profile - –¢–≤–æ–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã'
        f'\n ‚Ä¢ /create - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞'
        f'\n ‚Ä¢ /run - –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –∫–æ–¥–∞ ')


async def menu_command(update, context):
    # –ø–µ—Ä–µ–≤–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —é–∑–µ—Ä–∞ –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º(–Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–µ–∫—Ç, –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π)
    user = update.effective_user
    list_of_states[user.id] = 'without condition'
    the_naughty_list[user.id] = ''

    message = update.effective_message
    user_id = update.effective_user.id
    result = await context.bot.get_user_profile_photos(user_id)
    photos = result['photos']
    photo = photos[0][0]
    file_id = photo['file_id']
    keyboard = [
        [InlineKeyboardButton("üìö–¢–≤–æ–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="profile")],
        [InlineKeyboardButton("üìù–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞", callback_data="create")],
        [InlineKeyboardButton("üñä–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –∫–æ–¥–∞", callback_data="run")],
        [InlineKeyboardButton("üìñ–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", callback_data="run"),
         InlineKeyboardButton("‚Äçüéì–ö—É—Ä—Å –ø–æ –≥–∞–¥—é–∫–µ", callback_data="run")],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    response = requests.get(f'http://127.0.0.1/api/v1/users/{user_id}')
    await message.reply_photo(file_id, caption=f'Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}'
                                               f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: '
                                               f'{len(response.json()["user"]["projects"])}',
                              reply_markup=reply_markup)


async def profile_command(update: Update, context):
    # –ø–µ—Ä–µ–≤–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —é–∑–µ—Ä–∞ –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º(–Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–µ–∫—Ç, –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π)
    user = update.effective_user
    list_of_states[user.id] = 'without condition'

    user_id = update.effective_user.id
    response = requests.get(f'http://127.0.0.1/api/v1/users/{user_id}')
    keyboard = []
    for i in range(len(response.json()["user"]["projects"])):
        keyboard_line = [InlineKeyboardButton(response.json()["user"]["projects"][i]['name'],
                                              callback_data=f'{response.json()["user"]["projects"][i]["name"]}'
                                                            f'_{response.json()["user"]["projects"][i]["id"]}')]
        keyboard.append(keyboard_line)
    reply_markup = InlineKeyboardMarkup(keyboard)

    text_message = 'üìñ–í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:'
    try:
        await update.callback_query.message.reply_text(text_message, reply_markup=reply_markup)
    except AttributeError:
        await update.message.reply_text(text_message, reply_markup=reply_markup)


async def create_command(update, context):
    user = update.effective_user
    list_of_states[user.id] = 'creating a project'
    text_message = 'üôÇ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –ª—é–±–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.' \
                   '\nüòï–ò–ª–∏ —Ç–æ–ª—å–∫–æ –∂–µ–ª–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞. ' \
                   '\nü§ñ–í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –∏–∫–æ–Ω–∫–∞ –±—É–¥–µ—Ç –ø–æ–¥–æ–±—Ä–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.' \
                   '\n' \
                   '\nüåÉ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ —Å—Ç–∞–Ω–µ—Ç –∏–∫–æ–Ω–∫–æ–π –ø—Ä–æ–µ–∫—Ç–∞.' \
                   '\n–ò–∫–æ–Ω–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω—É–∂–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–∞–π—Ç–µ.' \
                   '\nüñä –ü–æ–¥–ø–∏—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞–Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞.' \
                   '\n' \
                   '\n‚ùóÔ∏è–î–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu.'

    try:
        await update.callback_query.message.reply_text(text_message)
    except AttributeError:
        await update.message.reply_text(text_message)


async def run_command(update, context):
    # –ø–µ—Ä–µ–≤–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —é–∑–µ—Ä–∞ –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º(–Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–µ–∫—Ç, –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π)
    user = update.effective_user
    list_of_states[user.id] = 'filling out the project'

    current_code = ""
    keyboard = [
        [InlineKeyboardButton("üì• –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å —Ç–µ–∫—É—â–∏–º –∫–æ–¥–æ–º", callback_data="create")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    text_message = \
        '–ö–æ–¥ –±—É–¥–µ—Ç —Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è ‚ÄºÔ∏è–ø–æ–ª–Ω–æ—Å—Ç—å—é‚ÄºÔ∏è —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è' \
        '\n' \
        '\n‚úèÔ∏è–í–∞—à –∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:' \
        '\n' \
        '\n#***–ú–µ—Å—Ç–æ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ–¥–∞***' \
        f'\n{current_code}' \
        '\n.............................' \
        '\n' \
        '\n' \
        '\n‚ùóÔ∏è–ö–æ–¥ –≤—ã–≤–æ–¥–∏—Ç:' \
        '\n‚ùï–í—ã–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.' \
        '\n‚ùï–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç —Ç–æ –∫–æ–¥ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç.' \
        '\n‚ùï–ï—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –æ—à–∏–±–∫–∞ —Ç–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–Ω–∞ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–Ω–∞.'
    try:
        await update.callback_query.message.reply_text(text_message, reply_markup=reply_markup)
    except AttributeError:
        await update.message.reply_text(text_message, reply_markup=reply_markup)


async def text_echo(update, context):
    user = update.effective_user
    if list_of_states[user.id] == 'without condition':
        await update.effective_message.reply_text('ü§ñ–ò–∑–≤–∏–Ω–∏—Ç–µ —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –≤–µ–¥—å —è –≤—Å–µ–≥–æ –ª–∏—à—å –±–æ—Ç'
                                                  '\n'
                                                  '\n–ü–æ–ø—Ä–æ–±—É–π–¥–µ –∫–æ–º–∞–Ω–¥—É üëâ/helpüëà –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏'
                                                  '\n'
                                                  '\nü´∂–£–¥–∞—á–Ω–æ–≥–æ –∫–æ–¥–∏–Ω–≥–∞ü´∂')
    elif list_of_states[user.id] == 'creating a project':
        message = update.effective_message
        media_group_id = message.media_group_id
        if message.photo and media_group_id:
            if the_naughty_list[user.id]:
                pass
            else:
                the_naughty_list[user.id] = media_group_id
                await update.effective_message.reply_text('ü§ñ –ü—Ä–æ—Å—Ç–∏, –Ω–æ —è –ø—Ä–æ—Å–∏–ª —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. '
                                                          '\n–ê –∫–æ–≥–¥–∞ —Ç—ã –ø—Ä–∏—Å—ã–ª–∞–µ—à—å –±–æ–ª—å—à–µ,'
                                                          ' —Ç–æ —è –Ω–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è, –∫–∞–∫–æ–µ –ª—É—á—à–µ'
                                                          ' –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏–∫–æ–Ω–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ üëâüëà '
                                                          '\n'
                                                          '\nüíõ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
                                                          ' —Å –ø–æ–¥–ø–∏—Å—å—é, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å'
                                                          ' –¥–ª—è —Ç–µ–±—è –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç üíõ '
                                                          '\n'
                                                          '\nüëç –Ø –≤–µ—Ä—é, —á—Ç–æ —É —Ç–µ–±—è —ç—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è –∏ '
                                                          '\nü´∂ –£–¥–∞—á–Ω–æ–≥–æ –∫–æ–¥–∏–Ω–≥–∞! ü´∂')
        else:
            the_naughty_list[user.id] = ''
            if message.photo:
                if message.caption:
                    # –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
                    list_of_states[user.id] = 'without condition'
                    photo = update.message.photo[-1]
                    file = await context.bot.get_file(photo.file_id)
                    url = file.file_path
                    response = requests.get(url)
                    encoded_content = base64.b64encode(response.content)
                    response = requests.post('http://127.0.0.1/api/v1/projects',
                                             json={'user_id': user.id, 'name': message.caption,
                                                   'token': REST_API_TOKENS[0], 'img': encoded_content.decode('utf-8')})
                    await update.effective_message.reply_text('‚úÖ–í–∞—à –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω'
                                                              '\n'
                                                              '\n‚ùï –í—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –µ–≥–æ,'
                                                              ' –µ—Å–ª–∏ –≤ –º–µ–Ω—é –ø–µ—Ä–µ–π–¥–µ—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É'
                                                              '\n‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏èüìö –¢–≤–æ–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã ‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è'
                                                              '\n‚ùï –ò–ª–∏ –µ—Å–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /profile.'
                                                              '\n'
                                                              '\nü´∂ –£–¥–∞—á–Ω–æ–≥–æ –∫–æ–¥–∏–Ω–≥–∞! ü´∂')
                else:
                    await update.effective_message.reply_text('ü§ñ –ü—Ä–æ—Å—Ç–∏, –Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ'
                                                              '\n'
                                                              '\nüíõ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
                                                              ' —Å –ø–æ–¥–ø–∏—Å—å—é, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å'
                                                              ' –¥–ª—è —Ç–µ–±—è –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç üíõ '
                                                              '\n'
                                                              '\nüëç –Ø –≤–µ—Ä—é, —á—Ç–æ —É —Ç–µ–±—è —ç—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è –∏ '
                                                              '\nü´∂ –£–¥–∞—á–Ω–æ–≥–æ –∫–æ–¥–∏–Ω–≥–∞! ü´∂')
            elif message.text:
                response = requests.post('http://127.0.0.1/api/v1/projects',
                                         json={'user_id': user.id, 'name': message.text,
                                               'token': REST_API_TOKENS[0]})
                list_of_states[user.id] = 'without condition'
                await update.effective_message.reply_text('‚úÖ–í–∞—à –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω'
                                                          '\n'
                                                          '\n‚ùï –í—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –µ–≥–æ, –µ—Å–ª–∏ –≤ –º–µ–Ω—é –ø–µ—Ä–µ–π–¥–µ—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É'
                                                          '\n  ‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏èüìö –¢–≤–æ–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã ‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è'
                                                          '\n‚ùï –ò–ª–∏ –µ—Å–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /profile.'
                                                          '\n'
                                                          '\nü´∂ –£–¥–∞—á–Ω–æ–≥–æ –∫–æ–¥–∏–Ω–≥–∞! ü´∂')


def formatting_in_base64(result_imgs):
    imgs_json = []
    for img in result_imgs:
        buffered = BytesIO()
        img.save(buffered, format="PNG")
        a = base64.b64encode(buffered.getvalue()).decode("utf-8")
        imgs_json.append(json.dumps(a))
    return imgs_json


def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CallbackQueryHandler(profile_command, pattern="^" + "profile" + "$"))
    application.add_handler(CallbackQueryHandler(create_command, pattern="^" + "create" + "$"))
    application.add_handler(CallbackQueryHandler(run_command, pattern="^" + "run" + "$"))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CommandHandler("profile", profile_command))
    application.add_handler(CommandHandler("create", create_command))
    application.add_handler(CommandHandler("run", run_command))
    application.add_handler(MessageHandler(filters.ALL, text_echo))
    application.run_polling()


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main() –≤ —Å–ª—É—á–∞–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
if __name__ == '__main__':
    list_of_states = {}
    the_naughty_list = {}
    main()
